# This file is automatically generated by ruby-ll. Manually changing this file
# is not recommended as any changes will be lost the next time this parser is
# re-generated.
require 'll/setup'

module Oga
module XML
# DOM parser for both XML and HTML.
#
# This parser does not produce a dedicated AST, instead it emits XML nodes
# directly. Basic usage of this parser is as following:
#
#     parser   = Oga::XML::Parser.new('<foo></foo>')
#     document = parser.parse
#
# To enable HTML parsing you'd use the following instead:
#
#     parser   = Oga::XML::Parser.new('<foo></foo>', :html => true)
#     document = parser.parse
#
# In both cases you can use either a String or an IO as the parser input. IO
# instances will result in lower memory overhead, especially when parsing large
# files.
#
class Parser < LL::Driver
  CONFIG = LL::DriverConfig.new

  CONFIG.terminals = [
    :$EOF, # 0
    :T_TEXT, # 1
    :T_STRING_SQUOTE, # 2
    :T_STRING_DQUOTE, # 3
    :T_STRING_BODY, # 4
    :T_DOCTYPE_START, # 5
    :T_DOCTYPE_END, # 6
    :T_DOCTYPE_TYPE, # 7
    :T_DOCTYPE_NAME, # 8
    :T_DOCTYPE_INLINE, # 9
    :T_COMMENT_START, # 10
    :T_COMMENT_BODY, # 11
    :T_COMMENT_END, # 12
    :T_CDATA_START, # 13
    :T_CDATA_BODY, # 14
    :T_CDATA_END, # 15
    :T_ELEM_NAME, # 16
    :T_ELEM_NS, # 17
    :T_ELEM_END, # 18
    :T_ATTR, # 19
    :T_ATTR_NS, # 20
    :T_XML_DECL_START, # 21
    :T_XML_DECL_END, # 22
    :T_PROC_INS_START, # 23
    :T_PROC_INS_NAME, # 24
    :T_PROC_INS_BODY, # 25
    :T_PROC_INS_END, # 26
  ].freeze

  CONFIG.rules = [
    [3, 0, 0, 1], # 0
    [3, 1, 4, 21, 6, 0], # 1
    [3, 2, 0, 3], # 2
    [3, 3, 0, 5], # 3
    [3, 4, 0, 7], # 4
    [3, 5, 0, 9], # 5
    [3, 6, 0, 17], # 6
    [3, 7, 0, 13], # 7
    [3, 8, 0, 16], # 8
    [3, 9, 1, 6, 0, 4, 8, 24, 8, 23, 8, 22, 1, 8, 1, 5], # 9
    [3, 10, 4, 25, 6, 0], # 10
    [3, 11, 1, 15, 0, 6, 1, 13], # 11
    [3, 12, 0, 6, 1, 14], # 12
    [3, 13, 2, 0], # 13
    [3, 14, 1, 12, 0, 8, 1, 10], # 14
    [3, 15, 0, 8, 1, 11], # 15
    [3, 16, 2, 0], # 16
    [3, 17, 1, 26, 0, 10, 1, 24, 1, 23], # 17
    [3, 18, 0, 10, 1, 25], # 18
    [3, 19, 2, 0], # 19
    [3, 20, 1, 16], # 20
    [3, 21, 1, 16, 1, 17], # 21
    [3, 22, 0, 14, 0, 11], # 22
    [3, 23, 1, 18, 0, 1, 0, 12], # 23
    [3, 24, 4, 26, 6, 0], # 24
    [3, 25, 8, 27, 1, 19, 1, 20], # 25
    [3, 26, 8, 28, 1, 19], # 26
    [3, 27, 1, 22, 0, 14, 1, 21], # 27
    [3, 28, 0, 18, 1, 1], # 28
    [3, 29, 0, 18, 1, 1], # 29
    [3, 30, 2, 0], # 30
    [3, 31, 1, 3, 0, 20, 1, 3], # 31
    [3, 32, 1, 2, 0, 20, 1, 2], # 32
    [3, 33, 0, 20, 1, 4], # 33
    [3, 34, 2, 0], # 34
    [3, 35, 0, 2], # 35
    [3, 36, 1, 7], # 36
    [3, 37, 0, 19], # 37
    [3, 38, 0, 19], # 38
    [3, 39, 1, 9], # 39
    [3, 40, 0, 15], # 40
    [3, 41, 0, 19], # 41
    [3, 42, 0, 19], # 42
  ].freeze

  CONFIG.table = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], # 0
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], # 1
    [-1, 6, -1, -1, -1, 2, -1, -1, -1, -1, 4, -1, -1, 3, -1, -1, 7, 7, -1, -1, -1, 8, -1, 5, -1, -1, -1], # 2
    [-1, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 3
    [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10], # 4
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 5
    [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13], # 6
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 7
    [16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16], # 8
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, -1], # 9
    [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 18, 19], # 10
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 11
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, 22, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 12
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 13
    [24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24], # 14
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 26, 25, -1, -1, -1, -1, -1, -1], # 15
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 27, -1, -1, -1, -1, -1], # 16
    [-1, 28, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 17
    [30, 29, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30], # 18
    [-1, -1, 32, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 19
    [34, 34, 34, 34, 33, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34], # 20
    [-1, 35, -1, -1, -1, 35, -1, -1, -1, -1, 35, -1, -1, 35, -1, -1, 35, 35, -1, -1, -1, 35, -1, 35, -1, -1, -1], # 21
    [-1, -1, -1, -1, -1, -1, -1, 36, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 22
    [-1, -1, 37, 37, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 23
    [-1, -1, 38, 38, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 24
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, 39, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 25
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, 40, -1, -1, -1, -1, -1, -1], # 26
    [-1, -1, 41, 41, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 27
    [-1, -1, 42, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 28
  ].freeze

  CONFIG.actions = [
    [:_rule_0, 1], # 0
    [:_rule_1, 1], # 1
    [:_rule_2, 1], # 2
    [:_rule_3, 1], # 3
    [:_rule_4, 1], # 4
    [:_rule_5, 1], # 5
    [:_rule_6, 1], # 6
    [:_rule_7, 1], # 7
    [:_rule_8, 1], # 8
    [:_rule_9, 7], # 9
    [:_rule_10, 1], # 10
    [:_rule_11, 3], # 11
    [:_rule_12, 2], # 12
    [:_rule_13, 0], # 13
    [:_rule_14, 3], # 14
    [:_rule_15, 2], # 15
    [:_rule_16, 0], # 16
    [:_rule_17, 4], # 17
    [:_rule_18, 2], # 18
    [:_rule_19, 0], # 19
    [:_rule_20, 1], # 20
    [:_rule_21, 2], # 21
    [:_rule_22, 2], # 22
    [:_rule_23, 3], # 23
    [:_rule_24, 1], # 24
    [:_rule_25, 3], # 25
    [:_rule_26, 2], # 26
    [:_rule_27, 3], # 27
    [:_rule_28, 2], # 28
    [:_rule_29, 2], # 29
    [:_rule_30, 0], # 30
    [:_rule_31, 3], # 31
    [:_rule_32, 3], # 32
    [:_rule_33, 2], # 33
    [:_rule_34, 0], # 34
    [:_rule_35, 1], # 35
    [:_rule_36, 1], # 36
    [:_rule_37, 1], # 37
    [:_rule_38, 1], # 38
    [:_rule_39, 1], # 39
    [:_rule_40, 1], # 40
    [:_rule_41, 1], # 41
    [:_rule_42, 1], # 42
  ].freeze

  # Hash mapping token types and dedicated error labels.
  #
  # @return [Hash]
  TOKEN_ERROR_MAPPING = {
    :T_STRING         => 'string',
    :T_TEXT           => 'text',
    :T_DOCTYPE_START  => 'doctype start',
    :T_DOCTYPE_END    => 'doctype closing tag',
    :T_DOCTYPE_TYPE   => 'doctype type',
    :T_DOCTYPE_NAME   => 'doctype name',
    :T_DOCTYPE_INLINE => 'inline doctype rules',
    :T_CDATA          => 'CDATA',
    :T_COMMENT        => 'comment',
    :T_ELEM_START     => 'element start',
    :T_ELEM_NAME      => 'element name',
    :T_ELEM_NS        => 'element namespace',
    :T_ELEM_END       => 'element closing tag',
    :T_ATTR           => 'attribute',
    :T_ATTR_NS        => 'attribute namespace',
    :T_XML_DECL_START => 'XML declaration start',
    :T_XML_DECL_END   => 'XML declaration end',
    :T_PROC_INS_START => 'processing-instruction start',
    :T_PROC_INS_NAME  => 'processing-instruction name',
    :T_PROC_INS_END   => 'processing-instruction closing tag',
    -1                => 'end of input'
  }

  # @param [String|IO] data The input to parse.
  # @param [Hash] options
  # @see [Oga::XML::Lexer#initialize]
  def initialize(data, options = {})
    @data  = data
    @lexer = Lexer.new(data, options)
    @line = 1
    @lexer.reset_native
  end

  # Yields the next token from the lexer.
  #
  # @yieldparam [Array]
  def each_token
    @lexer.advance do |type, value, line|
      @line = line if line

      yield [type, value]
    end

    yield [-1, -1]
  end

  # @param [Fixnum] stack_type
  # @param [Fixnum] stack_value
  # @param [Symbol] token_type
  # @param [String] token_value
  def parser_error(stack_type, stack_value, token_type, token_value)
    case id_to_type(stack_type)
    when :rule
      message = "Unexpected #{token_type} for rule #{stack_value}"
    when :terminal
      expected = id_to_terminal(stack_value)
      expected = TOKEN_ERROR_MAPPING[expected]   || expected
      got      = TOKEN_ERROR_MAPPING[token_type] || token_type
      message  = "Unexpected #{got}, expected #{expected} instead"
    when :eof
      message = 'Unexpected end of input'
    end

    message += " on line #{@line}"

    raise LL::ParserError, message
  end

  # @param [Array] children
  # @return [Oga::XML::Document]
  def on_document(children = [])
    document = Document.new(:type => @lexer.html? ? :html : :xml)

    children.each do |child|
      if child.is_a?(Doctype)
        document.doctype = child

      elsif child.is_a?(XmlDeclaration)
        document.xml_declaration = child

      else
        document.children << child
      end
    end

    document
  end

  # @param [Hash] options
  def on_doctype(options = {})
    Doctype.new(options)
  end

  # @param [String] text
  # @return [Oga::XML::Cdata]
  def on_cdata(text = nil)
    Cdata.new(:text => text)
  end

  # @param [String] text
  # @return [Oga::XML::Comment]
  def on_comment(text = nil)
    Comment.new(:text => text)
  end

  # @param [String] name
  # @param [String] text
  # @return [Oga::XML::ProcessingInstruction]
  def on_proc_ins(name, text = nil)
    ProcessingInstruction.new(:name => name, :text => text)
  end

  # @param [Array] attributes
  # @return [Oga::XML::XmlDeclaration]
  def on_xml_decl(attributes = [])
    options = {}

    attributes.each do |attr|
      options[attr.name.to_sym] = attr.value
    end

    XmlDeclaration.new(options)
  end

  # @param [String] text
  # @return [Oga::XML::Text]
  def on_text(text)
    Text.new(:text => text)
  end

  # @param [String] namespace
  # @param [String] name
  # @param [Hash] attributes
  # @return [Oga::XML::Element]
  def on_element(namespace, name, attributes = {})
    element = Element.new(
      :namespace_name => namespace,
      :name           => name,
      :attributes     => attributes
    )

    element
  end

  # @param [Oga::XML::Element] element
  # @param [Array] children
  # @return [Oga::XML::Element]
  def on_element_children(element, children = [])
    element.children = children

    element
  end

  # @param [Oga::XML::Element] element
  # @return [Oga::XML::Element]
  def after_element(element)
    element
  end

  # @param [String] name
  # @param [String] ns_name
  # @param [String] value
  # @return [Oga::XML::Attribute]
  def on_attribute(name, ns_name = nil, value = nil)
    Attribute.new(
      :namespace_name => ns_name,
      :name           => name,
      :value          => value
    )
  end

  # @param [Array] attrs
  def on_attributes(attrs)
    attrs
  end

  def _rule_0(val)
     on_document(val[0]) 
  end

  def _rule_1(val)
    val[0]
  end

  def _rule_2(val)
    val[0]
  end

  def _rule_3(val)
    val[0]
  end

  def _rule_4(val)
    val[0]
  end

  def _rule_5(val)
    val[0]
  end

  def _rule_6(val)
    val[0]
  end

  def _rule_7(val)
    val[0]
  end

  def _rule_8(val)
    val[0]
  end

  def _rule_9(val)
    
      on_doctype(
        :name         => val[1],
        :type         => val[2],
        :public_id    => val[3],
        :system_id    => val[4],
        :inline_rules => val[5]
      )
    
  end

  def _rule_10(val)
     val[0].inject(:+) 
  end

  def _rule_11(val)
     on_cdata(val[1]) 
  end

  def _rule_12(val)
     val[0] + val[1] 
  end

  def _rule_13(val)
     '' 
  end

  def _rule_14(val)
     on_comment(val[1]) 
  end

  def _rule_15(val)
     val[0] + val[1] 
  end

  def _rule_16(val)
     '' 
  end

  def _rule_17(val)
    
      on_proc_ins(val[1], val[2])
    
  end

  def _rule_18(val)
     val[0] + val[1] 
  end

  def _rule_19(val)
     '' 
  end

  def _rule_20(val)
     [nil, val[0]] 
  end

  def _rule_21(val)
     val 
  end

  def _rule_22(val)
    
      on_element(val[0][0], val[0][1], val[1])
    
  end

  def _rule_23(val)
    
      if val[0]
        on_element_children(val[0], val[1])
      end

      after_element(val[0])
    
  end

  def _rule_24(val)
     on_attributes(val[0]) 
  end

  def _rule_25(val)
     on_attribute(val[1], val[0], val[2]) 
  end

  def _rule_26(val)
     on_attribute(val[0], nil, val[1]) 
  end

  def _rule_27(val)
     on_xml_decl(val[1]) 
  end

  def _rule_28(val)
    
      text = val[1] ? val[0] + val[1] : val[0]

      on_text(text)
    
  end

  def _rule_29(val)
     val[1] ? val[0] + val[1] : val[0] 
  end

  def _rule_30(val)
     nil 
  end

  def _rule_31(val)
     val[1] 
  end

  def _rule_32(val)
     val[1] 
  end

  def _rule_33(val)
     val[0] + val[1] 
  end

  def _rule_34(val)
     '' 
  end

  def _rule_35(val)
    val[0]
  end

  def _rule_36(val)
    val[0]
  end

  def _rule_37(val)
    val[0]
  end

  def _rule_38(val)
    val[0]
  end

  def _rule_39(val)
    val[0]
  end

  def _rule_40(val)
    val[0]
  end

  def _rule_41(val)
    val[0]
  end

  def _rule_42(val)
    val[0]
  end
end
end
end
